name: Rust Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: rocker # Name of the binary (without .exe)

jobs:
  build:
    name: Build for ${{ matrix.os_name }} (${{ matrix.target }})
    runs-on: ${{ matrix.os_image }}
    strategy:
      matrix:
        include:
          - os_name: Linux
            os_image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rocker-linux-amd64
            asset_name: rocker-linux-amd64
            use_cross: false
          - os_name: Windows
            os_image: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rocker-windows-amd64
            asset_name: rocker-windows-amd64.exe
            use_cross: false
          - os_name: macOS-arm64
            os_image: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rocker-macos-arm64
            asset_name: rocker-macos-arm64
            use_cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross (if applicable)
      if: matrix.use_cross == true
      run: cargo install cross --git https://github.com/cross-rs/cross --branch main

    - name: Build binary and prepare artifact
      run: |
        if [[ "${{ matrix.use_cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

        # Determine source binary name and full path
        # Note: CARGO uses PROJECT_NAME for the binary, not necessarily matrix.asset_name
        # matrix.asset_name is the *final* name we want for the binary in the artifact.
        SOURCE_BINARY_FILENAME="${{ env.PROJECT_NAME }}"
        if [[ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" || "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          SOURCE_BINARY_FILENAME="${SOURCE_BINARY_FILENAME}.exe"
        fi
        FULL_SOURCE_PATH="target/${{ matrix.target }}/release/${SOURCE_BINARY_FILENAME}"

        # Define and create staging directory for the artifact
        ARTIFACT_STAGE_DIR="artifact_stage"
        mkdir -p "${ARTIFACT_STAGE_DIR}"

        # Copy the binary into the staging directory, using its final asset name
        cp "${FULL_SOURCE_PATH}" "${ARTIFACT_STAGE_DIR}/${{ matrix.asset_name }}"

        # Copy the 'data' directory into the staging directory
        cp -r data "${ARTIFACT_STAGE_DIR}/"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifact_stage/ # Upload contents of the staging directory
        retention-days: 7
