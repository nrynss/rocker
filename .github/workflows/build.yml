name: Rust Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: rocker # Name of the binary (without .exe)

jobs:
  build:
    name: Build for ${{ matrix.os_name }} (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os_name: Linux
            target: x86_64-unknown-linux-gnu
            artifact_name: ${{ env.PROJECT_NAME }}-linux-amd64
            asset_name: ${{ env.PROJECT_NAME }}-linux-amd64
            use_cross: false
          - os_name: Windows
            target: x86_64-pc-windows-gnu
            artifact_name: ${{ env.PROJECT_NAME }}-windows-amd64
            asset_name: ${{ env.PROJECT_NAME }}-windows-amd64.exe
            use_cross: false
          - os_name: macOS-arm64
            target: aarch64-apple-darwin
            artifact_name: ${{ env.PROJECT_NAME }}-macos-arm64
            asset_name: ${{ env.PROJECT_NAME }}-macos-arm64
            use_cross: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies for Windows cross-compilation (if applicable)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y gcc-mingw-w64-x86-64
        echo "[target.x86_64-pc-windows-gnu]" >> ${HOME}/.cargo/config.toml
        echo "linker = "x86_64-w64-mingw32-gcc"" >> ${HOME}/.cargo/config.toml
        echo "ar = "x86_64-w64-mingw32-ar"" >> ${HOME}/.cargo/config.toml

    - name: Install cross (if applicable)
      if: matrix.use_cross == true
      run: cargo install cross --git https://github.com/cross-rs/cross --branch main

    - name: Build binary
      run: |
        if [[ "${{ matrix.use_cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
        SOURCE_PATH="target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}"
        if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          SOURCE_PATH="${SOURCE_PATH}.exe"
        fi
        cp "${SOURCE_PATH}" "${{ matrix.asset_name }}"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.asset_name }}
        retention-days: 7
